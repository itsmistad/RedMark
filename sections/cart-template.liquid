<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<div class="page-width" data-section-id="{{ section.id }}" data-section-type="cart-template">
  <div class="doubly-message"></div>
  {% if cart.item_count > 0 %}
    <div class="section-header text-center">
      <h1>{{ 'cart.general.title' | t }}</h1>
    </div>
    <form action="/cart" method="post" novalidate class="cart">
      <table>
        <thead class="cart__row cart__header">
          <th colspan="2">{{ 'cart.label.product' | t }}</th>
          <th>{{ 'cart.label.price' | t }}</th>
          <th class="text-center">{{ 'cart.label.quantity' | t }}</th>
          <th class="text-right">{{ 'cart.label.total' | t }}</th>
        </thead>
        <tbody>
          {% for item in cart.items %}
            <tr class="cart__row border-bottom line{{ forloop.index }} cart-flex{% if forloop.first %} border-top{% endif %}">
              <td class="cart__image-wrapper cart-flex-item">
                <a href="{{ item.url | within: collections.all }}">
                  <img class="cart__image" src="{{ item | img_url: '100x' }}" alt="{{ item.title | escape }}">
                </a>
              </td>
              <td class="cart__meta small--text-left cart-flex-item">
                <div class="list-view-item__title">
                  <a href="{{ item.url }}">
                    {{ item.product.title }}
                    <span class="saso-cart-item-discount-notes" data-key="{{item.key}}"></span>
                    <span class="saso-cart-item-upsell-notes" data-key="{{item.key}}"></span>
                    {% if item.quantity > 1 %}
                      <span class="medium-up--hide"><span class="visually-hidden">{{ 'cart.label.quantity' | t }}</span>(x{{ item.quantity }})</span>
                    {% endif %}
                  </a>
                </div>
                {% unless item.variant.title contains 'Default' %}
                  <div class="cart__meta-text">
                  {% for option in item.product.options %}
                    {{ option }}: {{ item.variant.options[forloop.index0] }} <br>
                  {% endfor %}
                  </div>
                {% endunless %}
                {%- assign property_size = item.properties | size -%}
                {% if property_size > 0 %}
                  <div class="cart__meta-text">
                    {% for p in item.properties %}
                      {% unless p.last == blank %}
                        {{ p.first }}:
                        {% if p.last contains '/uploads/' %}
                          <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a> <br />
                        {% else %}
                          {{ p.last }}<br />
                        {% endif %}
                      {% endunless %}
                    {% endfor %}
                  </div>
                {% endif %}
                <p class="small--hide cart_remove">
                  <a href="/cart/change?line={{ forloop.index }}&amp;quantity=0" class="btn btn--small btn--secondary cart__remove">{{ 'cart.general.remove' | t }}</a>
                </p>
              </td>
              <td class="cart__price-wrapper cart-flex-item">
                <span class="saso-cart-item-price" data-key="{{item.key}}">{{ item.price | money }}</span>
                  {% for discount in item.discounts %}
                    <div class="cart-item__discount medium-up--hide">{{ discount.title }}</div>
                  {% endfor %}
                  <div class="cart__edit medium-up--hide">
                    <button type="button" class="btn btn--secondary btn--small js-edit-toggle cart__edit--active" data-target="line{{ forloop.index }}">
                      <span class="cart__edit-text--edit">{{ 'cart.general.edit' | t }}</span>
                      <span class="cart__edit-text--cancel">{{ 'cart.general.cancel' | t }}</span>
                    </button>
                  </div>
              </td>
              <td class="cart__update-wrapper cart-flex-item text-right">
                <a href="/cart/change?line={{ forloop.index }}&amp;quantity=0" class="btn btn--small btn--secondary cart__remove medium-up--hide">{{ 'cart.general.remove' | t }}</a>
                <div class="cart__qty">
                  <label for="updates_{{ item.key }}" class="cart__qty-label">{{ 'cart.label.quantity' | t }}</label>
                  <input class="cart__qty-input" type="number" name="updates[]" id="updates_{{ item.key }}" value="{{ item.quantity }}" min="0" pattern="[0-9]*">
                </div>
                <input type="submit" name="update" class="btn btn--small cart__update medium-up--hide" value="{{ 'cart.general.update' | t }}">
              </td>
              <td class="text-right small--hide">
                {% if item.original_line_price != item.line_price %}
                  <div class="cart-item__original-price"><s>{{ item.original_line_price | money }}</s></div>
                {% endif %}
                <div>
                  <span class="saso-cart-item-line-price" data-key="{{item.key}}">{{ item.line_price | money }}</span>
                </div>
                {% for discount in item.discounts %}
                  <div class="cart-item__discount">{{ discount.title }}</div>
                {% endfor %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      <p class="processing-currency-message">
        {{ shop.name }} processes all orders in {{ shop.currency }}. 
        While the content of your cart is currently displayed in <span class="selected-currency"></span>, 
        you will check out using {{ shop.currency }} at the most current exchange rate.
      </p>
      <footer class="cart__footer">
        <div class="grid">
          <div class="grid__item medium-up--one-half cart-note">
            {% if section.settings.cart_notes_enable %}
              <label for="CartSpecialInstructions" class="cart-note__label small--text-center">{{ 'cart.general.note' | t }}</label>
              <textarea name="note" id="CartSpecialInstructions" class="cart-note__input">{{ cart.note }}</textarea>
            {% endif %}
            {% if section.settings.min_spend_discount_enable %}
              {%- assign car_total = cart.total_price | money_without_currency_format | money_without_currency | remove: '.00' | remove: ',' -%}
              {%- assign cart_order = section.settings.cart_order_above_box -%}
              {% assign diff = car_total | minus: cart_order %}
              {% if diff > 0 %}
                <p>We noticed your order amount is more than {{ section.settings.cart_order_above_box }}USD, so we are offering you {{ section.settings.cart_discount_box }}% discount</p>
                <div class="discount">
                  <h3>Discount Code</h3>
                  <input type="text" name="discount" value="{{section.settings.discount_code}}"/>
                  <p>Discount codes will be applied at check out.</p>
                </div>
              {% endif %}
            {% endif %}
          </div>
          <div class="grid__item text-right small--text-center{% if section.settings.cart_notes_enable %} medium-up--one-half{% endif %}">
            {% if section.settings.regular_price %}
              <div class="cart_total">
                {% assign total_saving = 0 %}
                {% for item in cart.items %}
                  {% capture rg__price %}{{ item.variant.compare_at_price  }}{% endcapture %}
                  {% capture tot_qty1 %} {{ item.quantity }} {% endcapture %}
                  {% assign rg__total_pr = rg__price | times: tot_qty1 %}
                  {% assign rg__total_last = rg__total_pr | plus: rg__total_last %}
                  {% if item.variant.compare_at_price > item.variant.price %}
                    {% capture saving %}{{ item.variant.compare_at_price | minus: item.variant.price }}{% endcapture %}
                    {% assign total_saving = saving | plus: total_saving %}
                    {% capture tot_qty %} {{ item.quantity }} {% endcapture %}
                  {% endif %}
                {% endfor %}
                <span class="cart__regular_total-title 1212"><b>Regular Price:{% capture about_me %}{{ rg__total_last }}{% endcapture %}</b></span>
                {% capture about_u %}{{ cart.total_price | minus: cato }}{% endcapture %}
                {% assign about_u = about_u | split: '.'%}
                {% assign about_u = about_u[0] %}
                {% if about_u  == about_me %}
                  <div class="mny 1">  {{ about_me | money}} </div>
                {% elsif about_u < about_me %}
                  <div class="mny cut_cus 2" style="text-decoration: line-through">  {{ about_me | money}} </div>
                {% elsif about_u > about_me %}
                  <div class="mny cut_cus 3" style="text-decoration: line-through">  {{ about_me | money}} </div>
                {% endif %}
                <br/>
              </div>
            {% endif %}
            <div class="cart_total">
              <span class="cart__subtotal-title">{{ 'cart.general.subtotal' | t }}</span>
              {% if section.settings.min_spend_discount_enable %}
                {%- assign car_total = cart.total_price | money_without_currency_format | money_without_currency | remove: '.00' | remove: ',' -%}
                {%- assign cart_order = section.settings.cart_order_above_box -%}
                {% assign diff = car_total | minus: cart_order %}
                {% if diff > 0 %}
                  {% assign cto = car_total | times: section.settings.cart_discount_box | divided_by: 100  %}
                  {% assign cato = cto | times: 100 %}
                  <span class="cart__subtotal 1">{% capture about_u %}{{ cart.total_price | minus: cato }}{% endcapture %}
                    {% assign about_u = about_u | split: '.'%}
                    {% assign about_u = about_u[0] %}
                  </span>  
                  {{ about_u | money }}
                {% else %}
                  <span class="cart__subtotal 2">{% capture about_u %}{{ cart.total_price | minus: cato }}{% endcapture %}
                    {% assign about_u = about_u | split: '.'%}
                    {% assign about_u = about_u[0] %}
                  </span>
                  {{ about_u | money }}
                {% endif %}
              {% else %}
                <span class="cart__subtotal 3">{% capture about_u %}{{ cart.total_price | minus: cato }}{% endcapture %}
                  {% assign about_u = about_u | split: '.'%}
                  {% assign about_u = about_u[0] %}
                </span>  
                <div class="mny"> {{ about_u | money }} </div>
              {% endif %}
            </div>
            {% if cart.total_discounts > 0 %}
              <div class="cart__savings">
                {{ 'cart.general.savings' | t }}
                <span class="cart__savings-amount">{{ cart.total_discounts | money }}</span>
              </div>
            {% endif %}
            {% if section.settings.total_savings %}
              <span class="total_savings">
                <span class="sav_total">Total Saving : </span>
                <div class="mny">{{ about_me | minus: about_u | abs | money }}</div>
              </span>
            {% endif %}
            <div class="cart-footer">
              {% if section.settings.related_product %}
                {% if relatedProduct != blank %}
                  <div class="custom">
                    <button type="button" class="custom_btn btn btn-info btn-lg jtone btn--small-wide" data-toggle="modal" data-target="#myModal">{{ section.settings.checkout_button_text }}</button>
                  </div>
                  <form action="/cart" method="post" novalidate="" class="cart">
                    <input type="submit" name="checkout" class="btn btn--small-wide second_button" value="{{ section.settings.checkout_button_text }}"> 
                  </form>
                {% else %}
                  <input type="submit" name="checkout" class="btn btn--small-wide " value="{{ section.settings.checkout_button_text }}"> 
                {% endif %}
              {% else %}
                <input type="submit" name="checkout" class="btn btn--small-wide" value="{{ section.settings.checkout_button_text }}"> 
              {% endif %}
            </div>
            <div class="update_button">
              <input type="submit" name="update" class="btn btn--secondary cart__update cart__update--large small--hide" value="{{ 'cart.general.update' | t }}">
            </div>
            {% if section.settings.shipping_text_enable %}
              <div class="cart__shipping">{{ section.settings.shipping_text }}</div>
            {% endif %}
            {% if section.settings.cart_expiry_enable %}
              <div class="visitor_counter">
                <div class="count1" id="countdown"></div>
                <div class="count1" id="timer"></div>
                <div class="container_text_cart"> 
                  <span class="text_cart">{{ section.settings.expiry_text }}</span> 
                </div>  
              </div>
            {% endif %}
            {% if section.settings.paypal_enable %}
              {% if additional_checkout_buttons %}
              <div class="additional-checkout-buttons">{{ content_for_additional_checkout_buttons }}</div>
              {% endif %}
            {% endif %}
          </div>
        </div>
      </footer>
    </form>
  {% else %}
    <div class="empty-page-content text-center">
      <h1>{{ 'cart.general.title' | t }}</h1>
      <p>{{ 'cart.general.empty' | t }}</p>
      <a href="/" class="btn btn--has-icon-after">{{ 'general.404.link' | t }}</a>
    </div>
  {% endif %}
</div>
<style>
  button#paypal-express-button {
    display: none;
  }
  {% if section.settings.paypal_enable %}
    button#paypal-express-button {
      display: block;   
    }
  {% endif %}
  .cut_cus .money {
    text-decoration: line-through;
  }  
  span.sav_total {
    padding-right: 9.6px;
    font-weight: bold;
  }
  span.cart__subtotal-title {
    font-weight: bold;
  }  
  .template-cart p.ajaxified-cart-feedback.success {  
    position: absolute;
  }
  .cart__subtotal {
    padding-left: 10px;
    min-width: 29px;
    display: inline-block;
  }
  .right_aligned {
    text-align: right;
  }
  .text_cart {
    color: #000;
    font-weight: bold;
  }
  @media screen and (min-width : 320px) and (max-width : 767px)  {
    td.cart__price-wrapper.cart-flex-item span {
      font-size: 12px;
    }
    .mny span.money {
      width: 120px;
    }
    span.cart__regular_total-title {
      font-size: 18px;
    }
    span.cart__subtotal-title {
      font-size: 19px;
      font-weight: bold;
      margin-right: 7px;
    }
    span.sav_total {
      padding-right: 18px;
      font-weight: bold;
      font-size: 18px;
    }
    label.cart-note__label.small--text-center {
      font-size: 15px;
    }
    .cart__shipping {
      font-size: 16px !important;
      text-align: center;
    }
    .discount {
      text-align: center;
      padding-bottom: 20px;
    }
    .cart_total {
      padding-bottom: 16px;
      font-size: 20px;
    }
    .cart__shipping {
      font-style: italic;
      font-size: 0.875em;
      padding: 18px 0 17px;
    }
  }
  .cart-footer .custom {
    background-color: {{ section.settings.checkout_button_color }} !important;
  }
  .cart-footer .custom button.btn.btn--small-wide {
    font-size: {{ section.settings.checkout_button_fontsize }} !important;
  }
  .test.btn.product-form__cart-submit {
    max-width: 200px;
  }
  .count1 {
    color: {{ section.settings.expiry_color }};
    font-family: Verdana, Arial, sans-serif;
    font-size: 18px;
    width: 5%; 
    font-weight: bold;
    float: right;
    text-decoration: none;
  }
  {% if section.settings.cart_notes_enable %}
    .count1 {
      width: 9% !important; 
    }
  {% endif %}
  span.text_cart {
    float: right;
  }
  #countdown{
    display:none;
  }
  span.text_cart {
    line-height: 25px;
  }
  @media screen and (min-width : 320px) and (max-width : 767px) {
    .template-cart .main-content{
      padding-top:0px;
    }
    .grid__item.medium-up--three-fifths.small--one-half h3 {
      font-size: 17px !important;
    }
    span.money {
      font-size: 20px;
    }
    .visitor_counter {
      width: 85%;
    }
    .container_text_cart {
      padding-right: 30px;
    } 
    span.text_cart {
      line-height: 25px;
      font-size: 13px;
    }
  }
  @media screen and (min-width : 768px) and (max-width : 1024px)  {
    span.text_cart {
      font-size: 11px;
    }
    .visitor_counter {
      float: left;
      width: 100%;
    }
    .count1 {
      width: 15%;
    }
    .cart__shipping {
      font-style: italic;
      font-size: 0.875em;
      padding: 18px 10px 20px;
    }
  }
  .template-cart input.btn.btn--small-wide.second_button {
    color: #fff !important;
    border-radius: 0px;
  }  
  input.btn.btn--small-wide.second_button {
    float: right;
  }
  .template-cart  input.btn.btn--small-wide {
    color: #fff !important ;
  }
</style>
<script>
  $('.product-form__item.product-form__item--submit.custom_buton').on( "click", 'button#AddToCart', function(e) {
    $('span#AddToCartText').trigger('click');          
  });
  $(document).ready(function() {
    if ($(".selected-currency").text() == "{{ shop.currency }}")
      $(".processing-currency-message").css("display", "none");

    function countdown( elementName, minutes, seconds ) {
      var element, endTime, hours, mins, msLeft, time;
      function twoDigits( n ) {
        return (n <= 9 ? "0" + n : n);
      }
      function updateTimer() {
        msLeft = endTime - (+new Date);
        if ( msLeft < 1000 ) {
         // element.innerHTML = "00:00";
        } else {
          time = new Date( msLeft );
          hours = time.getUTCHours();
          mins = time.getUTCMinutes();
          //element.innerHTML = (hours ? hours + ':' + twoDigits( mins ) : mins) + ':' + twoDigits( time.getUTCSeconds() );
          setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );
        }
      }

      element = document.getElementById( elementName );
      endTime = (+new Date) + 1000 * (60*minutes + seconds) + 500;
      updateTimer();
    }

    countdown( "countdown", 1, 5 );
    countdown( "countdown2", {{ section.settings.expiry_time }}, 0 );
  });
  var firstTime = true;
  function countdown(minutes) {
    var seconds = 60;
    var mins = minutes;
    if(firstTime && getCookie("minutes")&&getCookie("seconds")) {
      firstTime = false;
      seconds = getCookie("seconds");
      mins = getCookie("minutes");
    }
    function tick() {
      var counter = document.getElementById("timer");
      setCookie("minutes", mins, 10)
      setCookie("seconds", seconds, 10)
      var current_minutes = mins - 1
      seconds--;
      counter.innerHTML = current_minutes.toString() + ":" + (seconds < 10 ? "0" : "") + String(seconds);
      if (seconds > 0) {
        setTimeout(tick, 1000);
      } else if (mins > 1) {
        setTimeout(function() {
          countdown(mins - 1);
        }, 1000);
      }
    }
    tick();
  }
  function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
    var expires = "expires=" + d.toGMTString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
  }
  function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1);
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }
  countdown({{ section.settings.expiry_time }});
</script>

{% schema %}
{
  "name": "Cart page",
  "settings": [
    {
      "type": "checkbox",
      "id": "cart_notes_enable",
      "label": "Enable cart notes",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "paypal_enable",
      "label": "Enable paypal button",
      "default": true
    },
    {
      "type": "header",
      "content": "Checkout Button"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Button Text"
    },
    {
      "type": "color",
      "id": "checkout_button_color",
      "label": "Background color"
    },
    {
      "type": "text",
      "id": "checkout_button_fontsize",
      "label": "Font Size"
    },
    {
      "type": "header",
      "content": "Price Line Items"
    },
    {
      "type": "checkbox",
      "id": "regular_price",
      "label": "Enable regular price",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "total_savings",
      "label": "Enable total savings",
      "default": false
    },
    {
      "type": "header",
      "content": "Minimum Spend Discount"
    },
    {
      "type": "checkbox",
      "id": "min_spend_discount_enable",
      "label": "Enable minimum spend discount",
      "default": false
    },
    {
      "type": "text",
      "id": "cart_discount_box",
      "label": "Discount (%)"
    },
    {
      "type": "text",
      "id": "cart_order_above_box",
      "label": "Order Above (USD)"
    },
    {
      "type": "text",
      "id": "discount_code",
      "label": "Discount Code"
    },
    {
      "type": "header",
      "content": "Shipping Text"
    },
    {
      "type": "checkbox",
      "id": "shipping_text_enable",
      "label": "Enable shipping text",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Shipping Text"
    },
    {
      "type": "header",
      "content": "Upsell Products"
    },
    {
      "type": "checkbox",
      "id": "related_product",
      "label": "Enable upsells",
      "default": true
    },
    {
      "type": "header",
      "content": "Cart Expiry Timer"
    },
    {
      "type": "checkbox",
      "id": "cart_expiry_enable",
      "label": "Enable countdown",
      "default": true
    },
    {
      "type": "text",
      "id": "expiry_time",
      "label": "Timer (minutes)",
      "default": "10"
    },
    {
      "type": "text",
      "id": "expiry_text",
      "label": "Timer Text",
      "default": "Cart will expire in"
    },
    {
      "type": "color",
      "id": "expiry_color",
      "label": "Timer color",
      "default": "#000"
    }
  ]
}
{% endschema %}
